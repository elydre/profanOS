print 'starting unit tests for Olivine interpreter\n'
print 'version: !version\n'
print '--------\n'

// ----- ASSERT FUNCTION ------------------------------------------------------

FUNC assert
    IF !(eval !# ~ 2)
        print 'assert requires 2 arguments\n'
        RETURN
    END

    IF !0
        print '[  OK  ] !1\n'
    END; ELSE
        print '[ FAIL ] !1\n'
    END
END

FUNC assert_reverse
    IF !(eval !# ~ 2)
        print 'assert requires 2 arguments\n'
        RETURN
    END

    IF !0
        print '[ FAIL ] !1\n'
    END; ELSE
        print '[  OK  ] !1\n'
    END
END

assert         1 'assert function'
assert_reverse 0 'assert reverse'

del -f assert_reverse

// ----- IF + ELSE ------------------------------------------------------------

IF 0
    print '[ FAIL ] if + else\n'
END; ELSE
    IF 1
        print '[  OK  ] if + else\n'
    END; ELSE
        print '[ FAIL ] if + else\n'
    END
END

// ----- EVAL -----------------------------------------------------------------

FUNC deepeval
    IF !(eval 43 ~ 43)
        print '[ FAIL ] eval (simple equality)\n'
        RETURN
    END; IF !(eval 42 + 1 ~ 43)
        print '[ FAIL ] eval (addition, equality)\n'
        RETURN
    END; IF !(eval 1 + 32 x 2 ~ 65)
        print '[ FAIL ] eval (simple priority)\n'
        RETURN
    END; IF !(eval 1 + ( 31 + 1 ) x 2 ~ 66 - 1)
        print '[ FAIL ] eval (complex priority)\n'
        RETURN
    END; IF !(eval 30 % 8 ~ 36 / 6)
        print '[ FAIL ] eval (division, modulo)\n'
        RETURN
    END; IF !(eval "ab" + "cd" ~ "abcd")
        print '[ FAIL ] eval (str + str)\n'
        RETURN
    END; IF !(eval "ab" + "cd" ~ "abcd")
        print '[ FAIL ] eval (str . str)\n'
        RETURN
    END; IF !(eval "hello" ~ "hello")
        print '[ FAIL ] eval (str ~ str)\n'
        RETURN
    END; IF !(eval ( "hello" = "hello" ) ~ 1)
        print '[ FAIL ] eval (str ~ str)\n'
        RETURN
    END; IF !(eval "hello" > 2 ~ "llo")
        print '[ FAIL ] eval (str > int)\n'
        RETURN
    END; IF !(eval "hello" < 2 ~ "hel")
        print '[ FAIL ] eval (int < str)\n'
        RETURN
    END; IF !(eval 0x42 ~ 66)
        print '[ FAIL ] eval (hex)\n'
        RETURN
    END; IF !(eval 0b101010 ~ 42)
        print '[ FAIL ] eval (bin)\n'
        RETURN
    END; IF !(eval "coucou" @ 2 ~ "u")
        print '[ FAIL ] eval (char at index)\n'
        RETURN
    END;

    print '[  OK  ] all eval tests\n'
END

deepeval

del -f deepeval

// ----- BASIC VARIABLE -------------------------------------------------------

set var 43
assert !(eval !var = 43) 'basic variable'

del var

// ----- FOR LOOP -------------------------------------------------------------

set sum 0
FOR i !(range 1 11)
    set sum !(eval !sum + !i)
END

assert !(eval !sum = 55) 'for loop'

del sum

// ----- FOR + BREAK ----------------------------------------------------------

set last 0
FOR e 1 2 3 4 5 6 7 8 9 10
    set last !e
    IF !(eval !e = 7)
        BREAK
    END
END

assert !(eval !last = 7) 'for + break'

del last

// ----- FOR + CONTINUE -------------------------------------------------------

set sum 0
FOR e 1 2 3 4 5 6 7 8 9 10
    IF !(eval !e % 2)
        CONTINUE
    END
    set sum !(eval !sum + !e)
END

assert !(eval !sum = 30) 'for + continue'

del sum

// ----- WHILE LOOP -----------------------------------------------------------

set i 0
WHILE !(eval !i < 101)
    set ++ i
END

assert !(eval !i = 101) 'while loop'

del i

// ----- WHILE + BREAK --------------------------------------------------------

set i 0
WHILE 1
    set ++ i
    IF !(eval !i = 101)
        BREAK
    END
END

assert !(eval !i = 101) 'while + break'

del i

// ----- WHILE + CONTINUE -----------------------------------------------------

set i 0
set sum 0

WHILE !(eval !i ~ 101)
    set ++ i
    IF !(eval !i % 2)
        CONTINUE
    END
    set sum !(eval !sum + !i)
END

assert !(eval !sum = 2550) 'while + continue'

del sum
del i

// ----- PSEUDO ---------------------------------------------------------------

pseudo mypseudo1 mypseudo2
pseudo mypseudo2 set

mypseudo1 var 123

assert !(eval !var = 123) 'double pseudo'

del -p mypseudo1
del -p mypseudo2
del var

// ----- FUNCTION RETURN ------------------------------------------------------

FUNC testreturn
    RETURN 42
END

assert !(eval !(testreturn) = 42) 'function return'

del -f testreturn

// ----- FUNCTION ARGC --------------------------------------------------------

FUNC testargc
    RETURN !#
END

assert !(eval !(testargc 1 2 3 4 5) = 5) 'function argc'

del -f testargc

// ----- FUNCTION ARGV --------------------------------------------------------

FUNC testargv
    IF !#
        RETURN !(eval !0 x 2 + !1)
    END; ELSE
        RETURN 0
    END;
END

assert !(eval !(testargv 21 5) = 47) 'function argv'

del -f testargv

// ----- GLOBAL + LOCAL OVERLOAD ----------------------------------------------

FUNC testglobal
    global v1 1
    set v2 2
END

set v1 0
global v2 0

testglobal

assert !(eval !v1 = 1) 'local overload'
assert !(eval !v2 = 2) 'global overload'

del -f testglobal
del v1
del v2

// ----- LOCAL VARIABLE -------------------------------------------------------

FUNC testlocalsub
    set tmp 13
END

FUNC testlocal
    set tmp 12
    testlocalsub
    RETURN !(eval !tmp = 12)
END

assert !(testlocal) 'local variable'

del -f testlocalsub
del -f testlocal

// ----- FUNCTION IN VARIABLE -------------------------------------------------

FUNC testfuncinvar
    IF !(eval !# ~ 2)
        print 'testfuncinvar requires 2 arguments\n'
        RETURN
    END
    RETURN azerty !0 !1
END

set v '  testfuncinvar  coucou  '

assert !(eval '"!(!v hello)"' = '"azerty coucou hello"') 'function in variable'

del -f testfuncinvar
del v

// ----- PIPE PROCESSOR -------------------------------------------------------

FUNC temp
    print 'test\n'
    RETURN 42
END

FUNC pp_tester
    IF !(eval "!(print coucou |)" ~ "coucou")
        print '[ FAIL ] pipe (print)\n'
        RETURN
    END; IF !(eval "!(echo coucou |)" ~ "coucou")
        echo [ FAIL ] pipe (echo)
        RETURN
    END; IF !(eval !(print 'abc def yes' | wc -w |) ~ 3)
        print '[ FAIL ] pipe (print + wc)\n'
        RETURN
    END; IF !(eval "!(temp | temp |)" ~ "test")
        print '[ FAIL ] pipe (function)\n'
        RETURN
    END
    print '[  OK  ] pipe processor\n'
END

pp_tester

del -f pp_tester
del -f temp

print '--------\n'
